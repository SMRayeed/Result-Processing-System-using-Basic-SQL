CREATE USER FINAL IDENTIFIED BY FINAL;
GRANT ALL PRIVILEGES TO FINAL ;

CONNECT FINAL/FINAL ;

CREATE TABLE STUDENT
(
	ID VARCHAR2(20) PRIMARY KEY,
	DEPT VARCHAR2(1) NOT NULL,
	DOA DATE,
	PROG VARCHAR2(1),
	SCHEME VARCHAR2(5) CHECK(SCHEME='OIC' OR SCHEME='SELF'),
	CURRENT_SEMSTER NUMBER CHECK(CURRENT_SEMSTER BETWEEN 1 AND 8)
);

CREATE SEQUENCE STUD_ID START WITH 1
INCREMENT BY 1
MINVALUE 1
MAXVALUE 100;

   
CREATE OR REPLACE FUNCTION GENID(DOA DATE,DEPT VARCHAR2, PROG VARCHAR2) 
RETURN VARCHAR2  
IS 
	F NUMBER;
	G VARCHAR2(20);
	H VARCHAR2(20);
	D VARCHAR2(20);
	E VARCHAR2(20);
	DATE VARCHAR2(20);
	FINAL VARCHAR2(20);
   
BEGIN 
	SELECT STUD_ID.NEXTVAL INTO F FROM DUAL; 
	DATE:= TO_CHAR(DOA,'YYYY-DD-MM');
	H := TO_CHAR(F);
	G := LPAD(H, 3, ’0’); 
	D:=  SUBSTR(DATE, 3, 2);
	E:=RPAD(D,4,'0');
	SELECT (E||DEPT||PROG||G) INTO FINAL FROM DUAL;
RETURN FINAL;

END;
/

   
CREATE OR REPLACE FUNCTION GEN_SEMESTER(DOA DATE) 
RETURN NUMBER  
IS 
	F NUMBER;
	G NUMBER;
	H NUMBER;
	D VARCHAR2(20);
	E VARCHAR2(20);
	DATE VARCHAR2(20);
	TATE VARCHAR2(20);
	COMPARE_MONTH_CHAR1 VARCHAR2(20);
	COMPARE_MONTH_CHAR2 VARCHAR2(20);
	COMPARE_MONTH_NUM NUMBER;
	FINAL NUMBER;
   
BEGIN 
	DATE := TO_CHAR(DOA,'YYYY-DD-MM'); 
	D :=  SUBSTR(DATE, 3, 2);
	F := TO_NUMBER(D);
	F := F+1;

	TATE := TO_CHAR(SYSDATE,'YYYY-DD-MM');
	E := SUBSTR(TATE,3,2);
	G := TO_NUMBER(E);

	H := G-F;
	H := H+H;

	COMPARE_MONTH_CHAR1 := TO_CHAR(SYSDATE,'MM-YYYY-DD');
	COMPARE_MONTH_CHAR2 :=  SUBSTR(COMPARE_MONTH_CHAR1, 1, 2);
	COMPARE_MONTH_NUM := TO_NUMBER(COMPARE_MONTH_CHAR2);
	
	IF(COMPARE_MONTH_NUM  <=6) THEN
		FINAL:= H+1;
	ELSE 
		FINAL:= H+2;
		
	END IF;	
	
	RETURN FINAL;

END;
/

CREATE OR REPLACE TRIGGER STUDENT_ID_GENERATING_TRIGGER
BEFORE INSERT 
ON STUDENT
FOR EACH ROW

BEGIN
	:NEW.CURRENT_SEMSTER := GEN_SEMESTER(:NEW.DOA);
	:NEW.ID := GENID(:NEW.DOA,:NEW.DEPT,:NEW.PROG);
	
END;
/


INSERT INTO STUDENT(DEPT, DOA, PROG, SCHEME) VALUES(4,TO_DATE('01-12-2016','DD-MM-YYYY'),1,'OIC');


SELECT * FROM STUDENT ;


CREATE TABLE COURSE
(
	ID VARCHAR2(20) PRIMARY KEY,
	CREDIT FLOAT,
	SEMESTER NUMBER,
	CONSTRAINT CHECK_SEMESTER CHECK(SEMESTER BETWEEN 1 AND 8)
);


INSERT INTO COURSE VALUES ('GRAPHICS',3,5);
INSERT INTO COURSE VALUES ('OS',3,5);
INSERT INTO COURSE VALUES ('OSLAB',1.50,5);

SELECT * FROM COURSE ;


CREATE TABLE MARKS
(
	S_ID VARCHAR2(20),
	C_ID VARCHAR2(20),
	QUIZ1 NUMBER,
	QUIZ2 NUMBER,
	QUIZ3 NUMBER,
	MID NUMBER,
	FINAL NUMBER,
	ATTENDANCE NUMBER,
	CONSTRAINT FK_S_ID FOREIGN KEY (S_ID) REFERENCES STUDENT(ID),
	CONSTRAINT FK_C_ID FOREIGN KEY (C_ID) REFERENCES COURSE(ID)
);


CREATE TABLE CGPA
(
	S_ID VARCHAR2(20),
	SEMESTER NUMBER,
	CG FLOAT
);


INSERT INTO MARKS VALUES('160041001','GRAPHICS',15,15,15,60,130,30);
INSERT INTO MARKS VALUES('160041001','OS',15,15,15,60,130,30);
INSERT INTO MARKS VALUES('160041001','OSLAB',0,0,0,0,71,0);


CREATE OR REPLACE FUNCTION INPUTMARKS(SID VARCHAR2)
RETURN VARCHAR2  

IS 
	
	SEM NUMBER;
	TEMP VARCHAR2(20);
	CURSOR C_COURSE IS
	SELECT ID FROM COURSE WHERE SEMESTER = SEM ;
	B VARCHAR2(20);
	QUIZ_1 NUMBER;
	QUIZ_2 NUMBER;
	QUIZ_3 NUMBER;
	MI NUMBER;
	FIN NUMBER;
	ATT NUMBER;
	TOTAL NUMBER;
	CALC_NUM FLOAT;
	CALC_GRADE FLOAT;
	TEMP_GRADE FLOAT;
	TOTAL_CREDIT FLOAT;
	CREDITO FLOAT;
	CGP FLOAT;
	FALTU FLOAT;
	FEE NUMBER;
	TEE VARCHAR2(20);

BEGIN
	
	SELECT CURRENT_SEMSTER INTO SEM FROM STUDENT WHERE ID = SID ;	
	CALC_GRADE := 0;
	TEMP_GRADE :=0;
	TOTAL_CREDIT:=0;
	
	SELECT SCHEME INTO TEE FROM STUDENT WHERE ID=SID;
			FEE:=REMAINING_FEE(TEE,SEM);
			DBMS_OUTPUT.PUT_LINE(FEE);
			
	OPEN C_COURSE;
		LOOP
			FETCH C_COURSE INTO TEMP;
			EXIT WHEN C_COURSE%NOTFOUND;
			
			SELECT CREDIT INTO CREDITO FROM COURSE WHERE ID=TEMP;   
			SELECT QUIZ1 INTO QUIZ_1 FROM MARKS WHERE (C_ID=TEMP AND S_ID=SID);
			SELECT QUIZ2 INTO QUIZ_2 FROM MARKS WHERE (C_ID=TEMP AND S_ID=SID);
			SELECT QUIZ3 INTO QUIZ_3 FROM MARKS WHERE (C_ID=TEMP AND S_ID=SID);
			SELECT MID INTO MI FROM MARKS WHERE (C_ID=TEMP AND S_ID=SID);
			SELECT FINAL INTO FIN FROM MARKS WHERE (C_ID=TEMP AND S_ID=SID);
			SELECT ATTENDANCE INTO ATT FROM MARKS WHERE (C_ID=TEMP AND S_ID=SID);	
			
			FALTU:=RETURN_ATTENDANCE(ATTENDANCE,CREDITO);
			IF(ATTENDANCE<75) THEN DBMS_OUTPUT.PUT_LINE("NOT ELIGIBLE");
			ELSE
				TOTAL:=QUIZ_1+QUIZ_2+QUIZ_3+ATT+FIN+MI;
				CALC_NUM:= TOTAL/(CREDITO*100);
					IF(CALC_NUM>=.8) THEN CALC_GRADE := CREDITO*4 ;
					ELSIF(CALC_NUM>=.75 AND CALC_NUM<=.8) THEN CALC_GRADE := CREDITO*3.75 ;
					ELSIF(CALC_NUM>=.7 AND CALC_NUM<=.75) THEN CALC_GRADE := CREDITO*3.50 ;
					ELSIF(CALC_NUM>=.65 AND CALC_NUM<=.7) THEN CALC_GRADE := CREDITO*3.25 ;
					ELSIF(CALC_NUM>=.6 AND CALC_NUM<=.65) THEN CALC_GRADE := CREDITO*3.00 ;
					ELSIF(CALC_NUM>=.55 AND CALC_NUM<=.6) THEN CALC_GRADE := CREDITO*2.75 ;
					ELSE CALC_GRADE:= 0;
					END IF ;	 
			END IF;
			TEMP_GRADE :=TEMP_GRADE + CALC_GRADE;
			TOTAL_CREDIT :=TOTAL_CREDIT + CREDITO;
			CGP:=TEMP_GRADE/TOTAL_CREDIT;
				
		END LOOP;
	CLOSE C_COURSE;
	
	INSERT INTO CGPA VALUES(SID,SEM,CGP);
	RETURN B;
END;
/

SET SERVEROUTPUT ON



CREATE OR REPLACE TRIGGER STUDENT_RESULT_TRIGGER
AFTER INSERT 
ON MARKS
FOR EACH ROW
DECLARE

	A VARCHAR2(20);

BEGIN
	
	A:=INPUTMARKS(:NEW.S_ID); 
	
END;
/



CREATE OR REPLACE FUNCTION RETURN_ATTENDANCE(A NUMBER,CRE FLOAT)
RETURN FLOAT  

IS 
	ATT FLOAT;	
	BTT FLOAT;
BEGIN
	BTT:=TO_BINARY_FLOAT(A);
	ATT:= ((100/(CRE*10))*BTT);
	RETURN ATT;
END;
/



CREATE OR REPLACE FUNCTION RETURN_TUTIONFEE_INFO(SCHEME VARCHAR2,SEMESTER NUMBER)
RETURN NUMBER  

IS 
	TOTAL_FEE NUMBER;
	REMAINING_FEE NUMBER;
	
BEGIN
	IF(SCHEME = 'OIC') THEN 
			TOTAL_FEE := 5500;
			REMAINING_FEE := 0;
	ELSE
		TOTAL_FEE := 12000;
		IF(SEMESTER BETWEEN 1 AND 2) THEN REMAINING_FEE := 7500;
		ELSIF(SEMESTER BETWEEN 3 AND 4) THEN REMAINING_FEE := 5000;
		ELSIF(SEMESTER BETWEEN 5 AND 6) THEN REMAINING_FEE := 2500;
		ELSE REMAINING_FEE := 0;
		END IF ;
	END IF;
	
	RETURN REMAINING_FEE;
END;
/